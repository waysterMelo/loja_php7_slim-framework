<?php
namespace HCode\Model;

use HCode\DB\Sql;
use HCode\Model;

class Product extends Model{

    public static function listAll(){
        $sql = new Sql();
        return $sql->select("select * from tb_products order by id");
    }
    public static function checkList($list){
        foreach ($list as &$pro){
            $p = new Product();
            $p->setData($pro);
            $pro = $p->getValues();
        }
        return $list;

    }
    public function saveProduct(){
        $sql= new Sql();
        $results =  $sql->select("CALL sp_produto_save(:id, :descricao, :preco,
        :tamanho, :altura, :comprimento, :peso, :url)", array(
            ":id" => $this->getid(),
            ":descricao" => $this->getdescricao(),
            ":preco" => $this->getpreco(),
            ":tamanho" => $this->gettamanho(),
            ":altura" => $this->getaltura(),
            ":comprimento" => $this->getcomprimento(),
            ":peso" => $this->getpeso(),
            ":url" => $this->geturl()
        ));
       $this->setData($results[0]);
    }
    public function get($id){
        $sql = new Sql();
        $results = $sql->select("select * from tb_products where id = :id",
            [":id"=>$id]);

        $this->setData($results[0]);
    }
    public function delete(){
        $sql = new Sql();
        $sql->query("delete from tb_products where id = :idproduct",
            [":idproduct"=>$this->getid()]);
    }
    public function checkFoto(){
        if (file_exists($_SERVER['DOCUMENT_ROOT'].DIRECTORY_SEPARATOR.
            "site".DIRECTORY_SEPARATOR.
            "res". DIRECTORY_SEPARATOR.
            "img". DIRECTORY_SEPARATOR.
            "products".DIRECTORY_SEPARATOR. $this->getid().".jpg")
        ){
            $url = "/site/res/img/products/".$this->getid().".jpg";
        }else{
            $url = "/site/res/img/products/product.jpg";
        }

        return $this->setimage($url);
    }
    public function getValues(){
        $this->checkFoto();
        $values =  parent::getValues(); // TODO: Change the autogenerated stub
        return $values;
    }
    public function setPhoto($file){
        $extention = explode('.', $file['name']);
        $extention = end($extention);
        switch ($extention){
            case "jpeg":
            case "jpg" : $image = imagecreatefromjpeg($file["tmp_name"]); break;
            case "png" : $image = imagecreatefrompng($file["tmp_name"]);  break;
            case "gif" : $image = imagecreatefromgif($file["tmp_name"]);  break;
        }
        $destino = $_SERVER['DOCUMENT_ROOT'].DIRECTORY_SEPARATOR.
            "site".DIRECTORY_SEPARATOR.
            "res". DIRECTORY_SEPARATOR.
            "img". DIRECTORY_SEPARATOR.
            "products".DIRECTORY_SEPARATOR. $this->getid().".jpg";

        imagejpeg($image, $destino);
        imagedestroy($image);
        $this->checkFoto();
    }
    public function getfromUrl($url){
        $sql = new Sql();
        $rs = $sql->select("select * from tb_products where desurl = :desurl limit 1",[
            ":desurl"=>$url
        ]);
        $this->setData($rs[0]);
    }
    public function getCategories(){
        $sql = new Sql();
         return $sql->select("select * from tb_categories a 
inner join tb_categoriesproducts b on a.idcategory
 = b.idcategory where b.idproduct = :idproduct",[
     ':idproduct'=>$this->getid()
        ]);
    }
}